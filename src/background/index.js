(()=>{"use strict";class s{constructor(s){this.endTimestamp=null,this.tabSessions=[],this.startTimestamp=s}}class n{constructor(s,n){this.endTimestamp=null,this.domain=s,this.startTimestamp=n}}class e{static saveMainSession(s){chrome.storage.local.get(["mainSessions"],(n=>{let e=n.mainSessions||[];e.push(s),chrome.storage.local.set({mainSessions:e},(()=>{console.log("MainSession saved:",s)}))}))}static updateMainSession(s){chrome.storage.local.get(["mainSessions"],(n=>{let e=n.mainSessions||[];e.length>0?(e[e.length-1]=s,chrome.storage.local.set({mainSessions:e},(()=>{console.log("MainSession updated:",s)}))):console.error("No MainSessions available to update.")}))}static getMainSessions(s){chrome.storage.local.get(["mainSessions"],(n=>{n.mainSessions||console.error("No MainSessions found."),s(n.mainSessions||[])}))}static clearMainSessions(){chrome.storage.local.set({mainSessions:[]},(()=>{console.log("All MainSessions cleared.")}))}}class i{constructor(){this.currentMainSession=null}startMainSession(){this.currentMainSession&&this.endMainSession(),console.log("Starting new MainSession..."),this.currentMainSession=new s(Date.now()),e.saveMainSession(this.currentMainSession)}endMainSession(){this.currentMainSession?(console.log("Ending MainSession..."),this.currentMainSession.endTimestamp=Date.now(),e.updateMainSession(this.currentMainSession),this.currentMainSession=null):console.log("No MainSession to end.")}startTabSession(s){if(!this.currentMainSession)return void console.log("No MainSession active. Cannot start TabSession.");console.log("Starting new TabSession for domain:",s);const i=new n(s,Date.now());this.currentMainSession.tabSessions.push(i),e.updateMainSession(this.currentMainSession)}endTabSession(){if(!this.currentMainSession)return void console.log("No MainSession active. Cannot end TabSession.");if(0===this.currentMainSession.tabSessions.length)return void console.log("No TabSessions found. Nothing to end.");const s=this.currentMainSession.tabSessions[this.currentMainSession.tabSessions.length-1];s.endTimestamp?console.log("Warning: Attempted to end a TabSession that was already ended. Domain:",s.domain):(console.log("Ending TabSession for domain:",s.domain),s.endTimestamp=Date.now(),e.updateMainSession(this.currentMainSession))}}new class{constructor(){this.sessionsManager=new i,this.sessionsManager.startMainSession(),chrome.tabs.onActivated.addListener(this.handleTabActivation.bind(this)),chrome.tabs.onUpdated.addListener(this.handleTabUpdate.bind(this)),chrome.windows.onFocusChanged.addListener(this.handleWindowFocusChange.bind(this))}handleTabActivation(s){chrome.tabs.get(s.tabId,(s=>{if(s.url&&s.active){const n=new URL(s.url).hostname;this.sessionsManager.endTabSession(),this.sessionsManager.startTabSession(n)}}))}handleTabUpdate(s,n){"complete"===n.status&&chrome.tabs.get(s,(s=>{if(s.url&&s.active){const n=new URL(s.url).hostname;this.sessionsManager.endTabSession(),this.sessionsManager.startTabSession(n)}}))}handleWindowFocusChange(s){s!==chrome.windows.WINDOW_ID_NONE&&chrome.tabs.query({active:!0,currentWindow:!0},(s=>{var n;if(null===(n=s[0])||void 0===n?void 0:n.url){const n=new URL(s[0].url).hostname;this.sessionsManager.endTabSession(),this.sessionsManager.startTabSession(n)}}))}handleWindowRemoved(){chrome.windows.getAll({},(s=>{s.length}))}}})();