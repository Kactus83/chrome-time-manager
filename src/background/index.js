(()=>{"use strict";class s{constructor(s){this.endTimestamp=null,this.tabSessions=[],this.startTimestamp=s}}class n{constructor(s,n){this.endTimestamp=null,this.domain=s,this.startTimestamp=n}}class e{static saveMainSession(s){chrome.storage.local.get(["mainSessions"],(n=>{let e=n.mainSessions||[];e.push(s),chrome.storage.local.set({mainSessions:e},(()=>{console.log("MainSession saved:",s)}))}))}static updateMainSession(s){chrome.storage.local.get(["mainSessions"],(n=>{let e=n.mainSessions||[];e.length>0?(e[e.length-1]=s,chrome.storage.local.set({mainSessions:e},(()=>{console.log("MainSession updated:",s)}))):console.error("No MainSessions available to update.")}))}static getMainSessions(s){chrome.storage.local.get(["mainSessions"],(n=>{n.mainSessions||console.error("No MainSessions found."),s(n.mainSessions||[])}))}static getLastMainSession(){return new Promise(((s,n)=>{chrome.storage.local.get(["mainSessions"],(n=>{let e=n.mainSessions||[];e.length>0?s(e[e.length-1]):(console.error("No MainSessions found."),s(null))}))}))}static clearMainSessions(){chrome.storage.local.set({mainSessions:[]},(()=>{console.log("All MainSessions cleared.")}))}}class i{constructor(){this.currentMainSession=null}verifyAndCloseLastMainSession(){return s=this,n=void 0,o=function*(){try{const s=yield e.getLastMainSession();if(s&&!s.endTimestamp){console.log("Last MainSession was not ended correctly. Correcting...");const n=s.tabSessions.reduce(((s,n)=>n.endTimestamp?Math.max(s,n.endTimestamp):s),s.startTimestamp);s.endTimestamp=n,yield e.updateMainSession(s)}}catch(s){console.error("Error verifying last MainSession:",s)}},new((i=void 0)||(i=Promise))((function(e,t){function a(s){try{c(o.next(s))}catch(s){t(s)}}function r(s){try{c(o.throw(s))}catch(s){t(s)}}function c(s){var n;s.done?e(s.value):(n=s.value,n instanceof i?n:new i((function(s){s(n)}))).then(a,r)}c((o=o.apply(s,n||[])).next())}));var s,n,i,o}startMainSession(){this.currentMainSession&&this.endMainSession(),console.log("Starting new MainSession..."),this.verifyAndCloseLastMainSession(),this.currentMainSession=new s(Date.now()),e.saveMainSession(this.currentMainSession)}endMainSession(){this.currentMainSession?(console.log("Ending MainSession..."),this.currentMainSession.endTimestamp=Date.now(),e.updateMainSession(this.currentMainSession),this.currentMainSession=null):console.log("No MainSession to end.")}startTabSession(s){if(!this.currentMainSession)return void console.log("No MainSession active. Cannot start TabSession.");console.log("Starting new TabSession for domain:",s);const i=new n(s,Date.now());this.currentMainSession.tabSessions.push(i),e.updateMainSession(this.currentMainSession)}endTabSession(){if(!this.currentMainSession)return void console.log("No MainSession active. Cannot end TabSession.");if(0===this.currentMainSession.tabSessions.length)return void console.log("No TabSessions found. Nothing to end.");const s=this.currentMainSession.tabSessions[this.currentMainSession.tabSessions.length-1];s.endTimestamp?console.log("Warning: Attempted to end a TabSession that was already ended. Domain:",s.domain):(console.log("Ending TabSession for domain:",s.domain),s.endTimestamp=Date.now(),e.updateMainSession(this.currentMainSession))}}class o{constructor(s){this.sessionsManager=s,this.sessionsManager.startMainSession(),chrome.windows.onFocusChanged.addListener(this.handleWindowFocusChange.bind(this)),chrome.windows.onRemoved.addListener(this.handleWindowRemoved.bind(this))}handleWindowFocusChange(s){s!==chrome.windows.WINDOW_ID_NONE&&this.sessionsManager.startMainSession()}handleWindowRemoved(){chrome.windows.getAll({},(s=>{0===s.length&&this.sessionsManager.endMainSession()}))}}class t{constructor(s){this.sessionsManager=s,chrome.tabs.onActivated.addListener(this.handleTabActivation.bind(this)),chrome.tabs.onUpdated.addListener(this.handleTabUpdate.bind(this))}handleTabActivation(s){chrome.tabs.get(s.tabId,(s=>{if(s.url&&s.active){const n=new URL(s.url).hostname;this.sessionsManager.endTabSession(),this.sessionsManager.startTabSession(n)}}))}handleTabUpdate(s,n){"complete"===n.status&&chrome.tabs.get(s,(s=>{if(s.url&&s.active){const n=new URL(s.url).hostname;this.sessionsManager.endTabSession(),this.sessionsManager.startTabSession(n)}}))}}new class{constructor(){this.sessionsManager=new i,this.chromeMainActivityHandler=new o(this.sessionsManager),this.chromeTabActivityHandler=new t(this.sessionsManager)}}})();